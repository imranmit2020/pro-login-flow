// pages/api/generateReport.js

export default async function handler(req, res) {
  if (req.method !== "POST") {
    return res.status(405).json({ message: "Method not allowed" });
  }

  try {
    const { type, range, data } = req.body;

    if (type === "pdf") {
      const { jsPDF } = await import("jspdf");
      const doc = new jsPDF();
      const timestamp = Date.now();

      doc.setFontSize(24);
      doc.setFont("helvetica", "bold");
      doc.text("AI Call Agent Dashboard Report", 20, 30);

      doc.setFontSize(12);
      doc.setFont("helvetica", "normal");
      doc.text(`Generated: ${new Date().toLocaleString()}`, 20, 45);

      doc.setLineWidth(0.5);
      doc.line(20, 55, 190, 55);

      let yPos = 70;

      doc.setFontSize(18);
      doc.setFont("helvetica", "bold");
      doc.text("Key Performance Metrics", 20, yPos);
      yPos += 15;

      const metrics = [
        ["Total Calls", data.totalCalls?.toString() || "0"],
        ["Successful Calls", data.successfulCalls?.toString() || "0"],
        ["Success Rate", `${data.successRate || "0"}%`],
        ["Bookings Generated", data.bookingsGenerated?.toString() || "0"],
        ["Booking Rate", `${data.bookingRate || "0"}%`],
        ["Monthly Growth", `${data.monthlyGrowth || "0"}%`],
      ];

      doc.setFontSize(12);
      doc.setFont("helvetica", "bold");
      doc.setFillColor(59, 130, 246);
      doc.rect(20, yPos, 80, 10, "F");
      doc.rect(100, yPos, 80, 10, "F");

      doc.setTextColor(255, 255, 255);
      doc.text("Metric", 25, yPos + 7);
      doc.text("Value", 105, yPos + 7);
      yPos += 10;

      doc.setTextColor(0, 0, 0);
      doc.setFont("helvetica", "normal");

      metrics.forEach((row, index) => {
        const rowColor = index % 2 === 0 ? 248 : 255;
        doc.setFillColor(rowColor, rowColor, rowColor);
        doc.rect(20, yPos, 80, 10, "F");
        doc.rect(100, yPos, 80, 10, "F");

        doc.setDrawColor(200, 200, 200);
        doc.rect(20, yPos, 80, 10);
        doc.rect(100, yPos, 80, 10);

        doc.text(row[0], 25, yPos + 7);
        doc.text(row[1], 105, yPos + 7);
        yPos += 10;
      });

      yPos += 15;

      doc.setFontSize(18);
      doc.setFont("helvetica", "bold");
      doc.text("Performance Analysis", 20, yPos);
      yPos += 15;

      doc.setFontSize(11);
      doc.setFont("helvetica", "normal");

      const successRate = parseFloat(data.successRate) || 0;
      const bookingRate = parseFloat(data.bookingRate) || 0;
      const monthlyGrowth = parseFloat(data.monthlyGrowth) || 0;

      const insights = [];

      if (successRate >= 80) {
        insights.push(
          "Call Success: Excellent " +
            successRate +
            "% rate shows strong AI performance."
        );
      } else if (successRate >= 60) {
        insights.push(
          "Call Success: Good " +
            successRate +
            "% rate with optimization potential."
        );
      } else {
        insights.push(
          "Call Success: " + successRate + "% needs improvement via training."
        );
      }

      if (bookingRate >= 30) {
        insights.push(
          "Conversions: Strong " +
            bookingRate +
            "% rate shows effective sales process."
        );
      } else if (bookingRate >= 15) {
        insights.push(
          "Conversions: Moderate " +
            bookingRate +
            "% rate, optimize booking flow."
        );
      } else {
        insights.push(
          "Conversions: Low " +
            bookingRate +
            "% rate requires sales strategy review."
        );
      }

      insights.push(
        "Growth: " +
          monthlyGrowth +
          "% monthly increase demonstrates positive impact."
      );
      insights.push(
        "Reliability: 99.9% system uptime ensures consistent performance."
      );
      insights.push(
        "Efficiency: AI automation delivers significant cost savings."
      );

      insights.forEach((insight, index) => {
        const bulletPoint = "â€¢ ";
        const maxWidth = 170;
        const lines = doc.splitTextToSize(bulletPoint + insight, maxWidth);

        lines.forEach((line) => {
          doc.text(line, 25, yPos);
          yPos += 6;
        });
        yPos += 3;
      });

      doc.setFontSize(8);
      doc.setFont("helvetica", "normal");
      doc.setTextColor(128, 128, 128);
      doc.text("Generated by AI Call Agent Dashboard | Confidential", 20, 285);
      doc.text("Page 1 of 1", 170, 285);

      const pdfBuffer = doc.output("arraybuffer");
      const filename = `dashboard-report-${timestamp}.pdf`;

      res.setHeader("Content-Type", "application/pdf");
      res.setHeader(
        "Content-Disposition",
        `attachment; filename="${filename}"`
      );
      res.setHeader("Content-Length", pdfBuffer.byteLength);

      return res.send(Buffer.from(pdfBuffer));
    } else {
      return res.status(400).json({ message: "Unsupported export type" });
    }
  } catch (error) {
    console.error("Error generating report:", error);
    return res
      .status(500)
      .json({ message: "Error generating report", error: error.message });
  }
}
